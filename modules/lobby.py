import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput, Select
import random
from modules import database
from modules.draft import Draft, format_player_name
from loguru import logger
import asyncio
from datetime import datetime, timedelta

MAX_PLAYERS = 10 # –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏



class JoinLobbyButton(View):
    def __init__(self, lobby):
        super().__init__(timeout=None)
        self.lobby = lobby

    @discord.ui.button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏", style=discord.ButtonStyle.success)
    async def join_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        profile = await database.get_player_profile(interaction.user.id)

        if profile is None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç
            modal = PlayerProfileModal(self.lobby, interaction)
            await interaction.response.send_modal(modal)
            return

        # –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–±–±–∏
        await interaction.response.defer(ephemeral=True)
        await self.lobby.add_member(interaction.user)

        try:
            await interaction.message.edit(
                content=f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(self.lobby.members)}/{MAX_PLAYERS}.",
                view=self
            )
        except discord.NotFound:
            logger.warning("‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —É–∂–µ —É–¥–∞–ª—ë–Ω).")
            try:
                await interaction.followup.send(
                    content=f"{interaction.user.mention}, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏!",
                    ephemeral=True
                )
            except discord.NotFound:
                logger.warning(f"‚ö† Interaction –æ—Ç {interaction.user} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—Ç—ë–∫.")

    @discord.ui.button(label="–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", style=discord.ButtonStyle.danger)
    async def leave_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user not in self.lobby.members:
            await interaction.response.send_message("‚ùóÔ∏è –í—ã –Ω–µ –≤ –ª–æ–±–±–∏.", ephemeral=True)
            return

        self.lobby.members.remove(interaction.user)
        await interaction.response.send_message("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏.", ephemeral=True)

        logger.info(f"üö™ –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∏–∑ –ª–æ–±–±–∏: {interaction.user.display_name}")

        try:
            await self.lobby.message.edit(
                content=f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(self.lobby.members)}/{MAX_PLAYERS}.",
                view=self
            )
        except discord.NotFound:
            pass


class Lobby:
    count = 0

    def __init__(self, guild: discord.Guild, category_id: int):
        self.lobby_id = None
        self.message = None
        self.view = None
        Lobby.count += 1
        self.guild = guild
        self.members: list[discord.Member] = []
        self.channel: discord.TextChannel | None = None
        self.category_id = category_id
        self.name = f"‚óélobby {Lobby.count}"
        self.captains: list[discord.Member] = []
        self.draft_started = False
        self.victory_registered = False
        self.teams: list[list[discord.Member]] = [[], []]

    async def create_channel(self):
        try:
            category = discord.utils.get(self.guild.categories, id=self.category_id)
            if not category:
                logger.error("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID.")
                return

            overwrites = {
                self.guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False)
            }

            self.channel = await self.guild.create_text_channel(
                name=self.name,
                overwrites=overwrites,
                category=category
            )

            self.view = JoinLobbyButton(self)
            self.message = await self.channel.send(
                f"üéÆ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏.\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: 0/{MAX_PLAYERS}.",
                view=self.view
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –ª–æ–±–±–∏: {e}")

        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª: {self.channel.name} ({self.channel.id})")

    async def add_member(self, member: discord.Member):
        if member in self.members:
            await self.channel.send(f"{member.mention}, –≤—ã —É–∂–µ –≤ –ª–æ–±–±–∏.")
            return
        if len(self.members) >= MAX_PLAYERS:
            await self.channel.send(f"{member.mention}, –ª–æ–±–±–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
            return

        self.members.append(member)
        await self.channel.send(f"{member.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏ ({len(self.members)}/{MAX_PLAYERS})")

        if len(self.members) >= MAX_PLAYERS and not self.draft_started:
            self.draft_started = True
            # –£–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å–æ–≤—Å–µ–º
            for item in self.view.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True
            await self.message.edit(view=self.view)

            await self.close_lobby()

    async def close_lobby(self):
        self.draft_started = True

        try:
            # –í—ã–±–æ—Ä –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            RANK_ORDER = {
                "Radiant": 10,
                "Immortal": 9,
                "Ascendant": 8,
                "Diamond": 7,
                "Platinum": 6,
                "Gold": 5,
                "Silver": 4,
                "Bronze": 3,
                "Iron": 2,
                "Unranked": 0
            }

            player_profiles = []
            for member in self.members:
                profile = await database.get_player_profile(member.id)
                rank = profile["rank"] if profile else "Unranked"
                player_profiles.append((member, rank))

            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
            max_rank_value = max(RANK_ORDER.get(rank, 0) for _, rank in player_profiles)

            # –û—Ç–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å —ç—Ç–∏–º —Ä–∞–Ω–≥–æ–º
            top_players = [member for member, rank in player_profiles if RANK_ORDER.get(rank, 0) == max_rank_value]

            # –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —Ç–æ–ø-–≥—Ä—É–ø–ø—ã
            self.captains = random.sample(top_players, 2)

            # –û–±–Ω–æ–≤–ª—è–µ–º self.members: –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏
            self.members = [m for m in self.members if m not in self.captains]

            self.lobby_id = await database.save_lobby(
                channel_id=self.channel.id,
                captain_1_id=self.captains[0].id,
                captain_2_id=self.captains[1].id
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ
            overwrites = {
                self.guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False),
                self.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                self.captains[0]: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                self.captains[1]: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            }

            await self.channel.edit(overwrites=overwrites)

            embed = discord.Embed(
                title="‚úñ –õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ",
                description="–ù–∞–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.",
                color=discord.Color.red()
            )

            captain_1_info = await format_player_name(self.captains[0])
            captain_2_info = await format_player_name(self.captains[1])

            embed.add_field(
                name="‚öî –ö–∞–ø–∏—Ç–∞–Ω—ã –≤—ã–±—Ä–∞–Ω—ã",
                value=f"‚ô¶ {captain_1_info}\n‚ô£ {captain_2_info}",
                inline=False
            )
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ–±–±–∏
            players_info = []
            for member in self.members:
                info = await format_player_name(member)
                players_info.append(f"- {info}")

            embed.add_field(
                name="üéÆ –ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏",
                value="\n".join(players_info),
                inline=False
            )

            embed.set_footer(text="–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥—Ä–∞—Ñ—Ç—É –∏–≥—Ä–æ–∫–æ–≤...")

            await self.channel.send(embed=embed)

            await self.start_draft()

            await asyncio.sleep(1200)  # –ñ–¥—ë–º 20 –º–∏–Ω—É—Ç

            await self.channel.send(
                "‚öî –ö–∞–ø–∏—Ç–∞–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–±–µ–¥—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                view=WinButtonView(self)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–æ–±–±–∏: {e}")

    async def start_draft(self):
        try:
            self.draft = Draft(self.guild, self.channel, self.captains, self.members)
            await self.draft.start()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥—Ä–∞—Ñ—Ç–∞: {e}")



    async def register_win(self, interaction: discord.Interaction, team: int):
        await interaction.response.defer(ephemeral=True)

        if interaction.user not in self.captains:
            await interaction.followup.send("‚ùå –¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–±–µ–¥—É!", ephemeral=True)
            return

        if getattr(self, 'victory_registered', False):
            await interaction.response.followup.send("‚ùå –ü–æ–±–µ–¥–∞ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ.", ephemeral=True)
            await interaction.followup.send("‚ùå –ü–æ–±–µ–¥–∞ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ.", ephemeral=True)
            return

        self.victory_registered = True

        winning_captain = self.captains[0] if team == 1 else self.captains[1]

        winners = []
        for cap, members in self.draft.teams.items():
            if cap.id == winning_captain.id:
                winners = [cap] + members
                break

        for player in winners:
            await database.add_win(player.id)

        await interaction.followup.send("‚úÖ –ü–æ–±–µ–¥–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞! –ö–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.",
                                                ephemeral=True)
        logger.info(f"‚úÖ –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {team} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥—ë–º 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞.")

        # –ñ–¥—ë–º 2 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(120)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ª–æ–±–±–∏ –≤ –ë–î
        try:
            team_1_ids = [p.id for p in [self.captains[0]] + self.draft.teams.get(self.captains[0], [])]
            team_2_ids = [p.id for p in [self.captains[1]] + self.draft.teams.get(self.captains[1], [])]

            await database.update_lobby(
                lobby_id=self.lobby_id,
                team_1=team_1_ids,
                team_2=team_2_ids,
                winner_team=team
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–±–±–∏: {e}")

        try:
            await self.channel.delete(reason="–õ–æ–±–±–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –ø–æ–±–µ–¥–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")

    async def get_team_members(self, team_number: int):
        if team_number == 1:
            return [self.captains[0]] + self.teams[0]
        else:
            return [self.captains[1]] + self.teams[1]


class CreateLobbyButton(View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @discord.ui.button(label="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ª–æ–±–±–∏", style=discord.ButtonStyle.primary, emoji="üéÆ")
    async def create_lobby_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer(ephemeral=True)

        category_id = 1321649371837759499  # –£–∫–∞–∑–∞—Ç—å ID –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        lobby_instance = Lobby(interaction.guild, category_id)
        await lobby_instance.create_channel()


class PlayerProfileModal(discord.ui.Modal, title="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"):
    username = discord.ui.TextInput(label="–í–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: sweet#b29", max_length=32)
    rank = discord.ui.TextInput(label="–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Immortal", max_length=32)

    def __init__(self, lobby, interaction):
        super().__init__()
        self.lobby = lobby
        self.interaction = interaction

    async def on_submit(self, interaction: discord.Interaction):
        username = self.username.value.strip()
        rank = self.rank.value.strip().capitalize()

        valid_ranks = [
            "Iron", "Bronze", "Silver", "Gold",
            "Platinum", "Diamond", "Ascendant", "Immortal", "Radiant",
            "Unranked"
        ]

        input_rank = str(self.rank).strip().capitalize()

        if input_rank not in valid_ranks:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
                "Iron, Bronze, Silver, Gold, Platinum, Diamond, Ascendant, Immortal, Radiant, Unranked",
                ephemeral=True
            )
            return

        profile = await database.get_player_profile(interaction.user.id)
        last_change = profile.get("last_name_change") if profile else None

        if last_change:
            now = datetime.utcnow()
            cooldown_until = last_change + timedelta(days=14)
            if now < cooldown_until:
                remaining = int(cooldown_until.timestamp())
                await interaction.response.send_message(
                    f"‚ùå –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å Riot-–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 14 –¥–Ω–µ–π.\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ <t:{remaining}:R>.",
                    ephemeral=True
                )
                return

        await database.save_player_profile(interaction.user.id, str(self.username.value), input_rank)

        await database.save_player_profile(
            interaction.user.id, username, rank, datetime.utcnow()
        )

        await interaction.response.send_message(
            f"‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n**–ù–∏–∫:** {self.username.value}\n**–†–∞–Ω–≥:** {input_rank}",
            ephemeral=True
        )
        await self.lobby.add_member(interaction.user)

class WinButtonView(discord.ui.View):
    def __init__(self, lobby):
        super().__init__(timeout=None)
        self.lobby = lobby

        captain_1 = lobby.captains[0].display_name
        captain_2 = lobby.captains[1].display_name

        self.add_item(WinButton(label=f"–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {captain_1}", style=discord.ButtonStyle.red, team=1, lobby=lobby))
        self.add_item(WinButton(label=f"–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {captain_2}", style=discord.ButtonStyle.blurple, team=2, lobby=lobby))


class WinButton(discord.ui.Button):
    def __init__(self, label: str, style: discord.ButtonStyle, team: int, lobby):
        super().__init__(label=label, style=style)
        self.team = team
        self.lobby = lobby

    async def callback(self, interaction: discord.Interaction):
        await self.lobby.register_win(interaction, team=self.team)





def setup(bot: commands.Bot):
    @bot.command(name="send_lobby_button")
    async def send_lobby_button(ctx: commands.Context):
        embed = discord.Embed(
            title="üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏",
            description=(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ª–æ–±–±–∏**, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤.\n\n"
                "üîπ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:** `10`\n"
                "üîπ –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä—É—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω—ã –∏ –Ω–∞—á–Ω—ë—Ç—Å—è –¥—Ä–∞—Ñ—Ç –∫–æ–º–∞–Ω–¥.\n"
                "üîπ –ü–æ—Å–ª–µ –¥—Ä–∞—Ñ—Ç–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–∞–Ω–¥."
            ),
            color=discord.Color.blurple()
        )

        embed.set_footer(text="–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!")
        view = CreateLobbyButton(bot)
        await ctx.send(embed=embed, view=view)
